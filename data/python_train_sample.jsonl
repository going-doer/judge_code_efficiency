{"user_id": "u729133443", "problem_id": "p03657", "language": "python", "submission_id_v0": "s252569931", "submission_id_v1": "s579542506", "cpu_time_v0": 107, "cpu_time_v1": 27, "memory_v0": 61008, "memory_v1": 9028, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 74.77, "input": "print(((eval(input().replace(*' *'))%3%2*'Imp'or'P')+'ossible'))", "target": "print(f\"{eval(input().replace(*' *'))%3%2*'Imp'or'P'}ossible\")", "code_v0_loc": 1, "code_v1_loc": 1, "code_v0_num_chars": 62, "code_v1_num_chars": 62, "code_v0_no_empty_lines": "print(((eval(input().replace(*\" *\")) % 3 % 2 * \"Imp\" or \"P\") + \"ossible\"))\n", "code_v1_no_empty_lines": "print(f\"{eval(input().replace(*' *'))%3%2*'Imp'or'P'}ossible\")\n", "code_same": false, "relative_loc_diff_percent": 0.0, "diff": ["-print(((eval(input().replace(*\" *\")) % 3 % 2 * \"Imp\" or \"P\") + \"ossible\"))", "+print(f\"{eval(input().replace(*' *'))%3%2*'Imp'or'P'}ossible\")"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0469687293, "measured_runtime_v1": 0.1505938187, "runtime_lift": 0.3118901543, "key": ["s252569931", "s579542506"], "problem_desc": "Score : 100 points\n\n### Problem Statement\n\nSnuke is giving cookies to his three goats.\n\nHe has two cookie tins. One contains A cookies, and the other contains B\ncookies. He can thus give A cookies, B cookies or A+B cookies to his goats (he\ncannot open the tins).\n\nYour task is to determine whether Snuke can give cookies to his three goats so\nthat each of them can have the same number of cookies.\n\n### Constraints\n\n  * 1 \\leq A,B \\leq 100\n  * Both A and B are integers.\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    A B\n    \n\n### Output\n\nIf it is possible to give cookies so that each of the three goats can have the\nsame number of cookies, print `Possible`; otherwise, print `Impossible`.\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    4 5\n    \n\n### Sample Output 1\n\n    \n    \n    Possible\n    \n\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    1 1\n    \n\n### Sample Output 2\n\n    \n    \n    Impossible\n    \n\nSince there are only two cookies, the three goats cannot have the same number\nof cookies no matter what Snuke gives to them.\n\n"}
{"user_id": "u078349616", "problem_id": "p02837", "language": "python", "submission_id_v0": "s425424388", "submission_id_v1": "s635043712", "cpu_time_v0": 280, "cpu_time_v1": 257, "memory_v0": 3064, "memory_v1": 3064, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 8.21, "input": "from itertools import product\n\n\n\nN = int(eval(input()))\n\nA = []\n\nXY = [[] for _ in range(N)]\n\nfor i in range(N):\n\n  A.append(int(eval(input()))) \n\n  for j in range(A[i]):\n\n    XY[i].append(list(map(int, input().split())))\n\n\n\nans = 0\n\nfor pattern in product(list(range(2)), repeat=N): # 0:\u4e0d\u6b63\u76f4 1:\u6b63\u76f4\n\n  flag = True\n\n  for i in range(N):\n\n    if pattern[i]: # i\u3055\u3093\u304c\u6b63\u76f4\u3068\u4eee\u5b9a\n\n      # \u767a\u8a00\u3068\u4e00\u81f4\u3059\u308b\u304b\uff1f\n\n      for a in range(A[i]):\n\n        if pattern[XY[i][a][0]-1] != XY[i][a][1]:\n\n          flag = False\n\n          break\n\n  if flag:\n\n    ans = max(ans, sum(pattern))\n\n\n\nprint(ans)", "target": "N = int(eval(input()))\n\nXY = []\n\nfor i in range(N):\n\n  A = int(eval(input()))\n\n  XY.append([list(map(int, input().split())) for _ in range(A)])\n\n\n\nans = 0\n\nfor bit in range(1 << N):\n\n  honest_cnt = 0\n\n  flag = True\n\n  for i in range(N):\n\n    if (bit >> i) & 1 == 0:\n\n      continue\n\n    honest_cnt += 1\n\n    for x, y in XY[i]:\n\n      if (bit >> (x-1)) & 1 != y:\n\n        flag = False\n\n        break\n\n  if flag:\n\n    ans = max(ans, honest_cnt)\n\n    \n\nprint(ans)", "code_v0_loc": 24, "code_v1_loc": 22, "code_v0_num_chars": 547, "code_v1_num_chars": 448, "code_v0_no_empty_lines": "from itertools import product\n\nN = int(eval(input()))\nA = []\nXY = [[] for _ in range(N)]\nfor i in range(N):\n    A.append(int(eval(input())))\n    for j in range(A[i]):\n        XY[i].append(list(map(int, input().split())))\nans = 0\nfor pattern in product(list(range(2)), repeat=N):  # 0:\u4e0d\u6b63\u76f4 1:\u6b63\u76f4\n    flag = True\n    for i in range(N):\n        if pattern[i]:  # i\u3055\u3093\u304c\u6b63\u76f4\u3068\u4eee\u5b9a\n            # \u767a\u8a00\u3068\u4e00\u81f4\u3059\u308b\u304b\uff1f\n            for a in range(A[i]):\n                if pattern[XY[i][a][0] - 1] != XY[i][a][1]:\n                    flag = False\n                    break\n    if flag:\n        ans = max(ans, sum(pattern))\nprint(ans)\n", "code_v1_no_empty_lines": "N = int(eval(input()))\nXY = []\nfor i in range(N):\n    A = int(eval(input()))\n    XY.append([list(map(int, input().split())) for _ in range(A)])\nans = 0\nfor bit in range(1 << N):\n    honest_cnt = 0\n    flag = True\n    for i in range(N):\n        if (bit >> i) & 1 == 0:\n            continue\n        honest_cnt += 1\n        for x, y in XY[i]:\n            if (bit >> (x - 1)) & 1 != y:\n                flag = False\n                break\n    if flag:\n        ans = max(ans, honest_cnt)\nprint(ans)\n", "code_same": false, "relative_loc_diff_percent": 8.3333333333, "diff": ["-from itertools import product", "-", "-A = []", "-XY = [[] for _ in range(N)]", "+XY = []", "-    A.append(int(eval(input())))", "-    for j in range(A[i]):", "-        XY[i].append(list(map(int, input().split())))", "+    A = int(eval(input()))", "+    XY.append([list(map(int, input().split())) for _ in range(A)])", "-for pattern in product(list(range(2)), repeat=N):  # 0:\u4e0d\u6b63\u76f4 1:\u6b63\u76f4", "+for bit in range(1 << N):", "+    honest_cnt = 0", "-        if pattern[i]:  # i\u3055\u3093\u304c\u6b63\u76f4\u3068\u4eee\u5b9a", "-            # \u767a\u8a00\u3068\u4e00\u81f4\u3059\u308b\u304b\uff1f", "-            for a in range(A[i]):", "-                if pattern[XY[i][a][0] - 1] != XY[i][a][1]:", "-                    flag = False", "-                    break", "+        if (bit >> i) & 1 == 0:", "+            continue", "+        honest_cnt += 1", "+        for x, y in XY[i]:", "+            if (bit >> (x - 1)) & 1 != y:", "+                flag = False", "+                break", "-        ans = max(ans, sum(pattern))", "+        ans = max(ans, honest_cnt)"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0969103346, "measured_runtime_v1": 0.1095253475, "runtime_lift": 0.8848210649, "key": ["s425424388", "s635043712"], "problem_desc": "Score : 300 points\n\n### Problem Statement\n\nThere are N people numbered 1 to N. Each of them is either an _honest_ person\nwhose testimonies are always correct or an _unkind_ person whose testimonies\nmay be correct or not.\n\nPerson i gives A_i testimonies. The j-th testimony by Person i is represented\nby two integers x_{ij} and y_{ij}. If y_{ij} = 1, the testimony says Person\nx_{ij} is honest; if y_{ij} = 0, it says Person x_{ij} is unkind.\n\nHow many honest persons can be among those N people at most?\n\n### Constraints\n\n  * All values in input are integers.\n  * 1 \\leq N \\leq 15\n  * 0 \\leq A_i \\leq N - 1\n  * 1 \\leq x_{ij} \\leq N\n  * x_{ij} \\neq i\n  * x_{ij_1} \\neq x_{ij_2} (j_1 \\neq j_2)\n  * y_{ij} = 0, 1\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    N\n    A_1\n    x_{11} y_{11}\n    x_{12} y_{12}\n    :\n    x_{1A_1} y_{1A_1}\n    A_2\n    x_{21} y_{21}\n    x_{22} y_{22}\n    :\n    x_{2A_2} y_{2A_2}\n    :\n    A_N\n    x_{N1} y_{N1}\n    x_{N2} y_{N2}\n    :\n    x_{NA_N} y_{NA_N}\n    \n\n### Output\n\nPrint the maximum possible number of honest persons among the N people.\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    3\n    1\n    2 1\n    1\n    1 1\n    1\n    2 0\n    \n\n### Sample Output 1\n\n    \n    \n    2\n    \n\nIf Person 1 and Person 2 are honest and Person 3 is unkind, we have two honest\npersons without inconsistencies, which is the maximum possible number of\nhonest persons.\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    3\n    2\n    2 1\n    3 0\n    2\n    3 1\n    1 0\n    2\n    1 1\n    2 0\n    \n\n### Sample Output 2\n\n    \n    \n    0\n    \n\nAssuming that one or more of them are honest immediately leads to a\ncontradiction.\n\n* * *\n\n### Sample Input 3\n\n    \n    \n    2\n    1\n    2 0\n    1\n    1 0\n    \n\n### Sample Output 3\n\n    \n    \n    1\n    \n\n"}
{"user_id": "u993435350", "problem_id": "p03167", "language": "python", "submission_id_v0": "s152996730", "submission_id_v1": "s537488890", "cpu_time_v0": 781, "cpu_time_v1": 211, "memory_v0": 60504, "memory_v1": 14408, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 72.98, "input": "import sys\n\nimport numpy as np\n\nfrom functools import lru_cache\n\nfrom collections import deque\n\n\n\n#input = sys.stdin.readline\n\n#sys.setrecursionlimit(10 ** 5)\n\n\n\nH,W = list(map(int,input().split()))\n\ngrid = [list(eval(input())) for i in range(H)]\n\ndp = [[0] * (W + 1) for i in range(H + 1)]\n\ndp[0][0] = 1\n\nmod = (10 ** 9) + 7\n\n\n\nfor i in range(H):\n\n  for j in range(W):\n\n    if i > 0 or j > 0:\n\n      if grid[i][j] == \"#\":\n\n        dp[i][j] = 0\n\n      else:\n\n        dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod\n\n\n\nprint((dp[H - 1][W - 1]))\n\n#print(dp)", "target": "import sys\n\nbuf = sys.stdin.buffer\n\n\n\nimport numpy as np\n\nMOD = 10 ** 9 + 7\n\n\n\nH,W = list(map(int,buf.readline().split()))\n\n\n\ngrid = np.frombuffer(buf.read(),dtype='S1').reshape(H,-1)[:,:W]\n\n\n\n#print(grid)\n\n\n\nMOD = 10 ** 9 + 7\n\ndp = np.zeros(W, dtype = np.int64)\n\ndp[0] = 1\n\n\n\nfor row in grid:\n\n  #print(row == b\"#\")\n\n  wall = (row == b'#')\n\n  # \u4e0a\u304b\u3089\u843d\u3068\u3057\u3066\u304f\u308b\n\n  dp[wall] = 0\n\n  # \u5de6\u304b\u3089\u53f3\u306b\n\n  np.cumsum(dp, out = dp)\n\n  # \u58c1\u306e\u88dc\u6b63\n\n  sub = np.maximum.accumulate(dp * wall)\n\n  dp -= sub\n\n  dp %= MOD\n\n\n\nanswer = dp[-1]\n\nprint(answer)", "code_v0_loc": 24, "code_v1_loc": 30, "code_v0_num_chars": 540, "code_v1_num_chars": 515, "code_v0_no_empty_lines": "import sys\nimport numpy as np\nfrom functools import lru_cache\nfrom collections import deque\n\n# input = sys.stdin.readline\n# sys.setrecursionlimit(10 ** 5)\nH, W = list(map(int, input().split()))\ngrid = [list(eval(input())) for i in range(H)]\ndp = [[0] * (W + 1) for i in range(H + 1)]\ndp[0][0] = 1\nmod = (10**9) + 7\nfor i in range(H):\n    for j in range(W):\n        if i > 0 or j > 0:\n            if grid[i][j] == \"#\":\n                dp[i][j] = 0\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod\nprint((dp[H - 1][W - 1]))\n# print(dp)\n", "code_v1_no_empty_lines": "import sys\n\nbuf = sys.stdin.buffer\nimport numpy as np\n\nMOD = 10**9 + 7\nH, W = list(map(int, buf.readline().split()))\ngrid = np.frombuffer(buf.read(), dtype=\"S1\").reshape(H, -1)[:, :W]\n# print(grid)\nMOD = 10**9 + 7\ndp = np.zeros(W, dtype=np.int64)\ndp[0] = 1\nfor row in grid:\n    # print(row == b\"#\")\n    wall = row == b\"#\"\n    # \u4e0a\u304b\u3089\u843d\u3068\u3057\u3066\u304f\u308b\n    dp[wall] = 0\n    # \u5de6\u304b\u3089\u53f3\u306b\n    np.cumsum(dp, out=dp)\n    # \u58c1\u306e\u88dc\u6b63\n    sub = np.maximum.accumulate(dp * wall)\n    dp -= sub\n    dp %= MOD\nanswer = dp[-1]\nprint(answer)\n", "code_same": false, "relative_loc_diff_percent": 20.0, "diff": ["+", "+buf = sys.stdin.buffer", "-from functools import lru_cache", "-from collections import deque", "-# input = sys.stdin.readline", "-# sys.setrecursionlimit(10 ** 5)", "-H, W = list(map(int, input().split()))", "-grid = [list(eval(input())) for i in range(H)]", "-dp = [[0] * (W + 1) for i in range(H + 1)]", "-dp[0][0] = 1", "-mod = (10**9) + 7", "-for i in range(H):", "-    for j in range(W):", "-        if i > 0 or j > 0:", "-            if grid[i][j] == \"#\":", "-                dp[i][j] = 0", "-            else:", "-                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod", "-print((dp[H - 1][W - 1]))", "-# print(dp)", "+MOD = 10**9 + 7", "+H, W = list(map(int, buf.readline().split()))", "+grid = np.frombuffer(buf.read(), dtype=\"S1\").reshape(H, -1)[:, :W]", "+# print(grid)", "+MOD = 10**9 + 7", "+dp = np.zeros(W, dtype=np.int64)", "+dp[0] = 1", "+for row in grid:", "+    # print(row == b\"#\")", "+    wall = row == b\"#\"", "+    # \u4e0a\u304b\u3089\u843d\u3068\u3057\u3066\u304f\u308b", "+    dp[wall] = 0", "+    # \u5de6\u304b\u3089\u53f3\u306b", "+    np.cumsum(dp, out=dp)", "+    # \u58c1\u306e\u88dc\u6b63", "+    sub = np.maximum.accumulate(dp * wall)", "+    dp -= sub", "+    dp %= MOD", "+answer = dp[-1]", "+print(answer)"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0441514421, "measured_runtime_v1": 0.2593697174, "runtime_lift": 0.1702258941, "key": ["s152996730", "s537488890"], "problem_desc": "Score : 100 points\n\n### Problem Statement\n\nThere is a grid with H horizontal rows and W vertical columns. Let (i, j)\ndenote the square at the i-th row from the top and the j-th column from the\nleft.\n\nFor each i and j (1 \\leq i \\leq H, 1 \\leq j \\leq W), Square (i, j) is\ndescribed by a character a_{i, j}. If a_{i, j} is `.`, Square (i, j) is an\nempty square; if a_{i, j} is `#`, Square (i, j) is a wall square. It is\nguaranteed that Squares (1, 1) and (H, W) are empty squares.\n\nTaro will start from Square (1, 1) and reach (H, W) by repeatedly moving right\nor down to an adjacent empty square.\n\nFind the number of Taro's paths from Square (1, 1) to (H, W). As the answer\ncan be extremely large, find the count modulo 10^9 + 7.\n\n### Constraints\n\n  * H and W are integers.\n  * 2 \\leq H, W \\leq 1000\n  * a_{i, j} is `.` or `#`.\n  * Squares (1, 1) and (H, W) are empty squares.\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    H W\n    a_{1, 1}\\ldotsa_{1, W}\n    :\n    a_{H, 1}\\ldotsa_{H, W}\n    \n\n### Output\n\nPrint the number of Taro's paths from Square (1, 1) to (H, W), modulo 10^9 +\n7.\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    3 4\n    ...#\n    .#..\n    ....\n    \n\n### Sample Output 1\n\n    \n    \n    3\n    \n\nThere are three paths as follows:\n\n![](https://img.atcoder.jp/dp/grid_0_0_muffet.png)\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    5 2\n    ..\n    #.\n    ..\n    .#\n    ..\n    \n\n### Sample Output 2\n\n    \n    \n    0\n    \n\nThere may be no paths.\n\n* * *\n\n### Sample Input 3\n\n    \n    \n    5 5\n    ..#..\n    .....\n    #...#\n    .....\n    ..#..\n    \n\n### Sample Output 3\n\n    \n    \n    24\n    \n\n* * *\n\n### Sample Input 4\n\n    \n    \n    20 20\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    ....................\n    \n\n### Sample Output 4\n\n    \n    \n    345263555\n    \n\nBe sure to print the count modulo 10^9 + 7.\n\n"}
{"user_id": "u392029857", "problem_id": "p03556", "language": "python", "submission_id_v0": "s273873551", "submission_id_v1": "s903554806", "cpu_time_v0": 65, "cpu_time_v1": 17, "memory_v0": 3188, "memory_v1": 3060, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 73.85, "input": "n = int(eval(input()))\n\nfor i in range(n,0,-1):\n\n    if i**0.5 == int(i**0.5):\n\n        ans = i\n\n        break\n\nprint(ans)", "target": "n = int(eval(input()))\n\nprint((int(n**0.5)**2))", "code_v0_loc": 6, "code_v1_loc": 2, "code_v0_num_chars": 116, "code_v1_num_chars": 39, "code_v0_no_empty_lines": "n = int(eval(input()))\nfor i in range(n, 0, -1):\n    if i**0.5 == int(i**0.5):\n        ans = i\n        break\nprint(ans)\n", "code_v1_no_empty_lines": "n = int(eval(input()))\nprint((int(n**0.5) ** 2))\n", "code_same": false, "relative_loc_diff_percent": 66.6666666667, "diff": ["-for i in range(n, 0, -1):", "-    if i**0.5 == int(i**0.5):", "-        ans = i", "-        break", "-print(ans)", "+print((int(n**0.5) ** 2))"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0487323191, "measured_runtime_v1": 0.0384157884, "runtime_lift": 1.2685492377, "key": ["s273873551", "s903554806"], "problem_desc": "Score : 200 points\n\n### Problem Statement\n\nFind the largest square number not exceeding N. Here, a _square number_ is an\ninteger that can be represented as the square of an integer.\n\n### Constraints\n\n  * 1 \\leq N \\leq 10^9\n  * N is an integer.\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    N\n    \n\n### Output\n\nPrint the largest square number not exceeding N.\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    10\n    \n\n### Sample Output 1\n\n    \n    \n    9\n    \n\n10 is not square, but 9 = 3 \u00d7 3 is. Thus, we print 9.\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    81\n    \n\n### Sample Output 2\n\n    \n    \n    81\n    \n\n* * *\n\n### Sample Input 3\n\n    \n    \n    271828182\n    \n\n### Sample Output 3\n\n    \n    \n    271821169\n    \n\n"}
{"user_id": "u677096240", "problem_id": "p02408", "language": "python", "submission_id_v0": "s826737558", "submission_id_v1": "s865280692", "cpu_time_v0": 30, "cpu_time_v1": 20, "memory_v0": 5604, "memory_v1": 5600, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 33.33, "input": "n = int(input())\n\ncards, suits = [], [\"S\", \"H\", \"C\", \"D\"]\n\nfor suit in suits:\n\n    for x in range(1, 14):\n\n        cards.append('{} {}'.format(suit, x))\n\n\n\nfor _ in range(n):\n\n    target = ' '.join(input().split())\n\n    if target in cards:\n\n        cards.remove(target)\n\n\n\n[print(c) for c in cards]\n", "target": "# \uff12\u6b21\u5143\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\n\n# \u304b\u3064\u3001\u5185\u5305\u8868\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3\n\nn = int(input())\n\nsuits = [\"S\", \"H\", \"C\", \"D\"]\n\ncards = [[s, n] for s in suits for n in range(1, 14)]\n\nfor i in range(n):\n\n    target = list(map(\n\n        lambda a: int(a) if a.isnumeric() else a, input().split()\n\n    ))\n\n    if target in cards:\n\n        cards.remove(target)\n\n[print(\"{} {}\".format(c[0], c[1])) for c in cards]\n\n\n", "code_v0_loc": 12, "code_v1_loc": 13, "code_v0_num_chars": 299, "code_v1_num_chars": 360, "code_v0_no_empty_lines": "n = int(input())\ncards, suits = [], [\"S\", \"H\", \"C\", \"D\"]\nfor suit in suits:\n    for x in range(1, 14):\n        cards.append(\"{} {}\".format(suit, x))\nfor _ in range(n):\n    target = \" \".join(input().split())\n    if target in cards:\n        cards.remove(target)\n[print(c) for c in cards]\n", "code_v1_no_empty_lines": "# \uff12\u6b21\u5143\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\n# \u304b\u3064\u3001\u5185\u5305\u8868\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3\nn = int(input())\nsuits = [\"S\", \"H\", \"C\", \"D\"]\ncards = [[s, n] for s in suits for n in range(1, 14)]\nfor i in range(n):\n    target = list(map(lambda a: int(a) if a.isnumeric() else a, input().split()))\n    if target in cards:\n        cards.remove(target)\n[print(\"{} {}\".format(c[0], c[1])) for c in cards]\n", "code_same": false, "relative_loc_diff_percent": 7.6923076923, "diff": ["+# \uff12\u6b21\u5143\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3", "+# \u304b\u3064\u3001\u5185\u5305\u8868\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3", "-cards, suits = [], [\"S\", \"H\", \"C\", \"D\"]", "-for suit in suits:", "-    for x in range(1, 14):", "-        cards.append(\"{} {}\".format(suit, x))", "-for _ in range(n):", "-    target = \" \".join(input().split())", "+suits = [\"S\", \"H\", \"C\", \"D\"]", "+cards = [[s, n] for s in suits for n in range(1, 14)]", "+for i in range(n):", "+    target = list(map(lambda a: int(a) if a.isnumeric() else a, input().split()))", "-[print(c) for c in cards]", "+[print(\"{} {}\".format(c[0], c[1])) for c in cards]"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0442068579, "measured_runtime_v1": 0.0615825004, "runtime_lift": 0.7178477265, "key": ["s826737558", "s865280692"], "problem_desc": "# Completing the Hand\n\nTaro wants to play a card game using a deck of cards, but he only has n cards\nand no jokers, while a full deck of 52 cards is required.\n\nA full deck of 52 cards contains 13 ranks for each of the four suits: spades,\nhearts, clubs, and diamonds.\n\n## Input\n\nThe first line contains the number of cards n (1 \u2264 n \u2264 52).\n\nThe following n lines contain the data for each of Taro's cards. Each card is\nrepresented by a pair of a character and an integer, indicating the suit and\nrank, respectively. The suits are represented by 'S' for spades, 'H' for\nhearts, 'C' for clubs, and 'D' for diamonds. The ranks are represented by\nintegers from 1 to 13.\n\n## Output\n\nOutput the cards that Taro needs to complete his hand. Each card should be\nprinted on a separate line, in the same format as the input. The output must\nbe sorted according to the following priority:\n\n  * Cards should be printed in the order of spades, hearts, clubs, and diamonds.\n  * Within each suit, cards with lower ranks should be printed first.\n\n## Sample Input\n\n    \n    \n    47\n    S 10\n    S 11\n    S 12\n    S 13\n    H 1\n    H 2\n    S 6\n    S 7\n    S 8\n    S 9\n    H 6\n    H 8\n    H 9\n    H 10\n    H 11\n    H 4\n    H 5\n    S 2\n    S 3\n    S 4\n    S 5\n    H 12\n    H 13\n    C 1\n    C 2\n    D 1\n    D 2\n    D 3\n    D 4\n    D 5\n    D 6\n    D 7\n    C 3\n    C 4\n    C 5\n    C 6\n    C 7\n    C 8\n    C 9\n    C 10\n    C 11\n    C 13\n    D 9\n    D 10\n    D 11\n    D 12\n    D 13\n    \n\n## Sample Output\n\n    \n    \n    S 1\n    H 3\n    H 7\n    C 12\n    D 8\n    \n\n## Notes\n\n[       Commentary       ](commentary.jsp?id=ITP1_6_B)\n\n"}
{"user_id": "u150984829", "problem_id": "p02315", "language": "python", "submission_id_v0": "s966994156", "submission_id_v1": "s012228070", "cpu_time_v0": 360, "cpu_time_v1": 330, "memory_v0": 5924, "memory_v1": 5928, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 8.33, "input": "N,W=list(map(int,input().split()))\n\nI=[[*list(map(int,input().split()))]for _ in[0]*N]\n\nC=[0]*-~W\n\nfor i in range(1,N+1):\n\n v,w=I[~-i]\n\n for j in range(W,w-1,-1):\n\n  t=v+C[j-w]\n\n  if t>C[j]:C[j]=t\n\nprint((C[W]))\n", "target": "import sys\n\nW=int(input().split()[1])\n\nC=[0]*-~W\n\nfor e in sys.stdin:\n\n v,w=list(map(int,e.split()))\n\n for i in range(W,w-1,-1):\n\n  t=v+C[i-w]\n\n  if t>C[i]:C[i]=t\n\nprint((C[W]))\n", "code_v0_loc": 9, "code_v1_loc": 9, "code_v0_num_chars": 198, "code_v1_num_chars": 170, "code_v0_no_empty_lines": "N, W = list(map(int, input().split()))\nI = [[*list(map(int, input().split()))] for _ in [0] * N]\nC = [0] * -~W\nfor i in range(1, N + 1):\n    v, w = I[~-i]\n    for j in range(W, w - 1, -1):\n        t = v + C[j - w]\n        if t > C[j]:\n            C[j] = t\nprint((C[W]))\n", "code_v1_no_empty_lines": "import sys\n\nW = int(input().split()[1])\nC = [0] * -~W\nfor e in sys.stdin:\n    v, w = list(map(int, e.split()))\n    for i in range(W, w - 1, -1):\n        t = v + C[i - w]\n        if t > C[i]:\n            C[i] = t\nprint((C[W]))\n", "code_same": false, "relative_loc_diff_percent": 0.0, "diff": ["-N, W = list(map(int, input().split()))", "-I = [[*list(map(int, input().split()))] for _ in [0] * N]", "+import sys", "+", "+W = int(input().split()[1])", "-for i in range(1, N + 1):", "-    v, w = I[~-i]", "-    for j in range(W, w - 1, -1):", "-        t = v + C[j - w]", "-        if t > C[j]:", "-            C[j] = t", "+for e in sys.stdin:", "+    v, w = list(map(int, e.split()))", "+    for i in range(W, w - 1, -1):", "+        t = v + C[i - w]", "+        if t > C[i]:", "+            C[i] = t"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0416996956, "measured_runtime_v1": 0.0673330307, "runtime_lift": 0.6193051931, "key": ["s966994156", "s012228070"], "problem_desc": "# 0-1 Knapsack Problem\n\n  \n\nYou have N items that you want to put them into a knapsack. Item i has value\nvi and weight wi.\n\nYou want to find a subset of items to put such that:\n\n  * The total value of the items is as large as possible.\n  * The items have combined weight at most W, that is capacity of the knapsack.\n\nFind the maximum total value of items in the knapsack.\n\n## Input\n\n    \n    \n    N W\n    v1 w1\n    v2 w2\n    :\n    vN wN\n    \n\nThe first line consists of the integers N and W. In the following lines, the\nvalue and weight of the i-th item are given.\n\n## Output\n\nPrint the maximum total values of the items in a line.\n\n## Constraints\n\n  * 1 \u2264 N \u2264 100\n  * 1 \u2264 vi \u2264 1000\n  * 1 \u2264 wi \u2264 1000\n  * 1 \u2264 W \u2264 10000\n\n## Sample Input 1\n\n    \n    \n    4 5\n    4 2\n    5 2\n    2 1\n    8 3\n    \n\n## Sample Output 1\n\n    \n    \n    13\n    \n\n  \n\n## Sample Input 2\n\n    \n    \n    2 20\n    5 9\n    4 10\n    \n\n## Sample Output 2\n\n    \n    \n    9\n    \n\n"}
{"user_id": "u624475441", "problem_id": "p03290", "language": "python", "submission_id_v0": "s468722663", "submission_id_v1": "s706260018", "cpu_time_v0": 515, "cpu_time_v1": 23, "memory_v0": 3188, "memory_v1": 3064, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 95.53, "input": "D,G = list(map(int,input().split()))\n\nP = []\n\nnum_p = 0\n\nfor i in range(1,D+1):\n\n    p,c = list(map(int,input().split()))\n\n    num_p += p\n\n    for j in range(1,p+1):\n\n        P += [(j,i*100*j+c*(j==p))]\n\ndp = [0]*(num_p+1)\n\nfor k,pt in P:\n\n    if k==1:\n\n        t_dp = dp[:]\n\n    for cur in range(1,num_p+1):\n\n        if cur>=k:\n\n            dp[cur] = max(dp[cur], t_dp[cur-k]+pt)\n\nfor i in range(num_p+1):\n\n    if dp[i]>=G:\n\n        print(i)\n\n        break", "target": "d,g = list(map(int,input().split()))\n\npc = [list(map(int,input().split()))for _ in[0]*d]\n\nans = []\n\nfor mask in range(1 << d):\n\n    s = 0\n\n    num = 0\n\n    rest_max = -1\n\n    for i in range(d):\n\n        p,c = pc[i]\n\n        if mask >> i & 1:\n\n            s += p * 100 * (i + 1) + c\n\n            num += p\n\n        else:\n\n            rest_max = i\n\n    if s < g:\n\n        s1 = 100 * (rest_max + 1)\n\n        need = (g - s + s1 - 1) // s1\n\n        if need >= pc[rest_max][0]:\n\n            continue\n\n        num += need\n\n    ans.append(num)\n\nprint((min(ans)))", "code_v0_loc": 19, "code_v1_loc": 22, "code_v0_num_chars": 445, "code_v1_num_chars": 545, "code_v0_no_empty_lines": "D, G = list(map(int, input().split()))\nP = []\nnum_p = 0\nfor i in range(1, D + 1):\n    p, c = list(map(int, input().split()))\n    num_p += p\n    for j in range(1, p + 1):\n        P += [(j, i * 100 * j + c * (j == p))]\ndp = [0] * (num_p + 1)\nfor k, pt in P:\n    if k == 1:\n        t_dp = dp[:]\n    for cur in range(1, num_p + 1):\n        if cur >= k:\n            dp[cur] = max(dp[cur], t_dp[cur - k] + pt)\nfor i in range(num_p + 1):\n    if dp[i] >= G:\n        print(i)\n        break\n", "code_v1_no_empty_lines": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in [0] * d]\nans = []\nfor mask in range(1 << d):\n    s = 0\n    num = 0\n    rest_max = -1\n    for i in range(d):\n        p, c = pc[i]\n        if mask >> i & 1:\n            s += p * 100 * (i + 1) + c\n            num += p\n        else:\n            rest_max = i\n    if s < g:\n        s1 = 100 * (rest_max + 1)\n        need = (g - s + s1 - 1) // s1\n        if need >= pc[rest_max][0]:\n            continue\n        num += need\n    ans.append(num)\nprint((min(ans)))\n", "code_same": false, "relative_loc_diff_percent": 13.6363636364, "diff": ["-D, G = list(map(int, input().split()))", "-P = []", "-num_p = 0", "-for i in range(1, D + 1):", "-    p, c = list(map(int, input().split()))", "-    num_p += p", "-    for j in range(1, p + 1):", "-        P += [(j, i * 100 * j + c * (j == p))]", "-dp = [0] * (num_p + 1)", "-for k, pt in P:", "-    if k == 1:", "-        t_dp = dp[:]", "-    for cur in range(1, num_p + 1):", "-        if cur >= k:", "-            dp[cur] = max(dp[cur], t_dp[cur - k] + pt)", "-for i in range(num_p + 1):", "-    if dp[i] >= G:", "-        print(i)", "-        break", "+d, g = list(map(int, input().split()))", "+pc = [list(map(int, input().split())) for _ in [0] * d]", "+ans = []", "+for mask in range(1 << d):", "+    s = 0", "+    num = 0", "+    rest_max = -1", "+    for i in range(d):", "+        p, c = pc[i]", "+        if mask >> i & 1:", "+            s += p * 100 * (i + 1) + c", "+            num += p", "+        else:", "+            rest_max = i", "+    if s < g:", "+        s1 = 100 * (rest_max + 1)", "+        need = (g - s + s1 - 1) // s1", "+        if need >= pc[rest_max][0]:", "+            continue", "+        num += need", "+    ans.append(num)", "+print((min(ans)))"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0457017908, "measured_runtime_v1": 0.0367260342, "runtime_lift": 1.2443976552, "key": ["s468722663", "s706260018"], "problem_desc": "Score : 300 points\n\n### Problem Statement\n\nA programming competition site _AtCode_ provides algorithmic problems. Each\nproblem is allocated a score based on its difficulty. Currently, for each\ninteger i between 1 and D (inclusive), there are p_i problems with a score of\n100i points. These p_1 + \u2026 + p_D problems are all of the problems available on\nAtCode.\n\nA user of AtCode has a value called _total score_. The total score of a user\nis the sum of the following two elements:\n\n  * Base score: the sum of the scores of all problems solved by the user.\n  * Perfect bonuses: when a user solves all problems with a score of 100i points, he/she earns the perfect bonus of c_i points, aside from the base score (1 \u2264 i \u2264 D).\n\nTakahashi, who is the new user of AtCode, has not solved any problem. His\nobjective is to have a total score of G or more points. At least how many\nproblems does he need to solve for this objective?\n\n### Constraints\n\n  * 1 \u2264 D \u2264 10\n  * 1 \u2264 p_i \u2264 100\n  * 100 \u2264 c_i \u2264 10^6\n  * 100 \u2264 G\n  * All values in input are integers.\n  * c_i and G are all multiples of 100.\n  * It is possible to have a total score of G or more points.\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    D G\n    p_1 c_1\n    :\n    p_D c_D\n    \n\n### Output\n\nPrint the minimum number of problems that needs to be solved in order to have\na total score of G or more points. Note that this objective is always\nachievable (see Constraints).\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    2 700\n    3 500\n    5 800\n    \n\n### Sample Output 1\n\n    \n    \n    3\n    \n\nIn this case, there are three problems each with 100 points and five problems\neach with 200 points. The perfect bonus for solving all the 100-point problems\nis 500 points, and the perfect bonus for solving all the 200-point problems is\n800 points. Takahashi's objective is to have a total score of 700 points or\nmore.\n\nOne way to achieve this objective is to solve four 200-point problems and earn\na base score of 800 points. However, if we solve three 100-point problems, we\ncan earn the perfect bonus of 500 points in addition to the base score of 300\npoints, for a total score of 800 points, and we can achieve the objective with\nfewer problems.\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    2 2000\n    3 500\n    5 800\n    \n\n### Sample Output 2\n\n    \n    \n    7\n    \n\nThis case is similar to Sample Input 1, but the Takahashi's objective this\ntime is 2000 points or more. In this case, we inevitably need to solve all\nfive 200-point problems, and by solving two 100-point problems additionally we\nhave the total score of 2000 points.\n\n* * *\n\n### Sample Input 3\n\n    \n    \n    2 400\n    3 500\n    5 800\n    \n\n### Sample Output 3\n\n    \n    \n    2\n    \n\nThis case is again similar to Sample Input 1, but the Takahashi's objective\nthis time is 400 points or more. In this case, we only need to solve two\n200-point problems to achieve the objective.\n\n* * *\n\n### Sample Input 4\n\n    \n    \n    5 25000\n    20 1000\n    40 1000\n    50 1000\n    30 1000\n    1 1000\n    \n\n### Sample Output 4\n\n    \n    \n    66\n    \n\nThere is only one 500-point problem, but the perfect bonus can be earned even\nin such a case.\n\n"}
{"user_id": "u759412327", "problem_id": "p03043", "language": "python", "submission_id_v0": "s846763596", "submission_id_v1": "s781343602", "cpu_time_v0": 60, "cpu_time_v1": 47, "memory_v0": 2940, "memory_v1": 9124, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 21.67, "input": "n,k = list(map(int, input().split()))\n\na = 0\n\n\n\nfor i in range(n):\n\n  s=i+1\n\n  c=0\n\n  while s<=k-1:\n\n    c+=1\n\n    s*=2\n\n  a+=1/n*(1/2**c)\n\n\n\nprint(a)", "target": "N,K = list(map(int, input().split()))\n\na = 0\n\n\n\nfor n in range(1,N+1):\n\n  c = 0\n\n  while n<K:\n\n    c+=1\n\n    n*=2\n\n  a+=(1/2**c)/N\n\n\n\nprint(a)", "code_v0_loc": 12, "code_v1_loc": 11, "code_v0_num_chars": 144, "code_v1_num_chars": 136, "code_v0_no_empty_lines": "n, k = list(map(int, input().split()))\na = 0\nfor i in range(n):\n    s = i + 1\n    c = 0\n    while s <= k - 1:\n        c += 1\n        s *= 2\n    a += 1 / n * (1 / 2**c)\nprint(a)\n", "code_v1_no_empty_lines": "N, K = list(map(int, input().split()))\na = 0\nfor n in range(1, N + 1):\n    c = 0\n    while n < K:\n        c += 1\n        n *= 2\n    a += (1 / 2**c) / N\nprint(a)\n", "code_same": false, "relative_loc_diff_percent": 8.3333333333, "diff": ["-n, k = list(map(int, input().split()))", "+N, K = list(map(int, input().split()))", "-for i in range(n):", "-    s = i + 1", "+for n in range(1, N + 1):", "-    while s <= k - 1:", "+    while n < K:", "-        s *= 2", "-    a += 1 / n * (1 / 2**c)", "+        n *= 2", "+    a += (1 / 2**c) / N"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0541924698, "measured_runtime_v1": 0.0507337773, "runtime_lift": 1.0681733678, "key": ["s846763596", "s781343602"], "problem_desc": "Score : 300 points\n\n### Problem Statement\n\nSnuke has a fair N-sided die that shows the integers from 1 to N with equal\nprobability and a fair coin. He will play the following game with them:\n\n  1. Throw the die. The current score is the result of the die.\n  2. As long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\n  3. The game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\n\nYou are given N and K. Find the probability that Snuke wins the game.\n\n### Constraints\n\n  * 1 \u2264 N \u2264 10^5\n  * 1 \u2264 K \u2264 10^5\n  * All values in input are integers.\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    N K\n    \n\n### Output\n\nPrint the probability that Snuke wins the game. The output is considered\ncorrect when the absolute or relative error is at most 10^{-9}.\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    3 10\n    \n\n### Sample Output 1\n\n    \n    \n    0.145833333333\n    \n\n  * If the die shows 1, Snuke needs to get four consecutive heads from four coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{3} \\times (\\frac{1}{2})^4 = \\frac{1}{48}.\n  * If the die shows 2, Snuke needs to get three consecutive heads from three coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{3} \\times (\\frac{1}{2})^3 = \\frac{1}{24}.\n  * If the die shows 3, Snuke needs to get two consecutive heads from two coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{3} \\times (\\frac{1}{2})^2 = \\frac{1}{12}.\n\nThus, the probability that Snuke wins is \\frac{1}{48} + \\frac{1}{24} +\n\\frac{1}{12} = \\frac{7}{48} \\simeq 0.1458333333.\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    100000 5\n    \n\n### Sample Output 2\n\n    \n    \n    0.999973749998\n    \n\n"}
{"user_id": "u857547702", "problem_id": "p02713", "language": "python", "submission_id_v0": "s207436570", "submission_id_v1": "s453701423", "cpu_time_v0": 1386, "cpu_time_v1": 1011, "memory_v0": 188952, "memory_v1": 69836, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 27.06, "input": "import math\n\nfrom functools import reduce\n\n\n\ndef gcd(*numbers):\n\n    return reduce(math.gcd, numbers)\n\nK=int(eval(input()))\n\nans=[]\n\nfor i in range(1,K+1):\n\n    for j in range(1,K+1):\n\n        for k in range(1,K+1):\n\n            ans.append(gcd(i,j,k))\n\nprint((sum(ans)))   ", "target": "import math\n\nfrom functools import reduce\n\n\n\ndef gcd(*numbers):\n\n    return reduce(math.gcd, numbers)\n\nK=int(eval(input()))\n\nans=0\n\nfor i in range(1,K+1):\n\n    for j in range(1,K+1):\n\n        for k in range(1,K+1):\n\n            ans+=gcd(i,j,k)\n\nprint(ans)", "code_v0_loc": 12, "code_v1_loc": 12, "code_v0_num_chars": 265, "code_v1_num_chars": 249, "code_v0_no_empty_lines": "import math\nfrom functools import reduce\n\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\n\nK = int(eval(input()))\nans = []\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        for k in range(1, K + 1):\n            ans.append(gcd(i, j, k))\nprint((sum(ans)))\n", "code_v1_no_empty_lines": "import math\nfrom functools import reduce\n\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\n\nK = int(eval(input()))\nans = 0\nfor i in range(1, K + 1):\n    for j in range(1, K + 1):\n        for k in range(1, K + 1):\n            ans += gcd(i, j, k)\nprint(ans)\n", "code_same": false, "relative_loc_diff_percent": 0.0, "diff": ["-ans = []", "+ans = 0", "-            ans.append(gcd(i, j, k))", "-print((sum(ans)))", "+            ans += gcd(i, j, k)", "+print(ans)"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0373011589, "measured_runtime_v1": 0.0443122387, "runtime_lift": 0.8417800589, "key": ["s207436570", "s453701423"], "problem_desc": "Score : 300 points\n\n### Problem Statement\n\nFind \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n\n### Constraints\n\n  * 1 \\leq K \\leq 200\n  * K is an integer.\n\n* * *\n\n### Input\n\nInput is given from Standard Input in the following format:\n\n    \n    \n    K\n    \n\n### Output\n\nPrint the value of \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K}\n\\gcd(a,b,c)}.\n\n* * *\n\n### Sample Input 1\n\n    \n    \n    2\n    \n\n### Sample Output 1\n\n    \n    \n    9\n    \n\n\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)\n+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2) =1+1+1+1+1+1+1+2=9\n\nThus, the answer is 9.\n\n* * *\n\n### Sample Input 2\n\n    \n    \n    200\n    \n\n### Sample Output 2\n\n    \n    \n    10813692\n    \n\n"}
{"user_id": "u923668099", "problem_id": "p02402", "language": "python", "submission_id_v0": "s263054226", "submission_id_v1": "s318169008", "cpu_time_v0": 30, "cpu_time_v1": 20, "memory_v0": 8600, "memory_v1": 8684, "status_v0": "Accepted", "status_v1": "Accepted", "improvement_frac": 33.33, "input": "# coding: utf-8\n\n# Here your code !\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\n\n\nprint((min(a),max(a),sum(a)))", "target": "eval(input())\n\na = [int(i) for i in input().split()]\n\n\n\nprint((min(a),max(a),sum(a)))", "code_v0_loc": 6, "code_v1_loc": 4, "code_v0_num_chars": 121, "code_v1_num_chars": 77, "code_v0_no_empty_lines": "# coding: utf-8\n# Here your code !\nn = int(eval(input()))\na = list(map(int, input().split()))\nprint((min(a), max(a), sum(a)))\n", "code_v1_no_empty_lines": "eval(input())\na = [int(i) for i in input().split()]\nprint((min(a), max(a), sum(a)))\n", "code_same": false, "relative_loc_diff_percent": 33.3333333333, "diff": ["-# coding: utf-8", "-# Here your code !", "-n = int(eval(input()))", "-a = list(map(int, input().split()))", "+eval(input())", "+a = [int(i) for i in input().split()]"], "diff_only_import_comment": false, "measured_runtime_v0": 0.0487568626, "measured_runtime_v1": 0.0494875908, "runtime_lift": 0.9852341133, "key": ["s263054226", "s318169008"], "problem_desc": "# Min, Max and Sum\n\nWrite a program which reads a sequence of $n$ integers $a_i (i = 1, 2, ...\nn)$, and prints the minimum value, maximum value and sum of the sequence.\n\n## Input\n\nIn the first line, an integer $n$ is given. In the next line, $n$ integers\n$a_i$ are given in a line.\n\n## Output\n\nPrint the minimum value, maximum value and sum in a line. Put a single space\nbetween the values.\n\n## Constraints\n\n  * $0 < n \\leq 10000$\n  * $-1000000 \\leq a_i \\leq 1000000$\n\n## Sample Input\n\n    \n    \n    5\n    10 1 5 4 17\n    \n\n## Sample Output\n\n    \n    \n    1 17 37\n    \n\n"}